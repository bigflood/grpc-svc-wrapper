// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SayRequest struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SayRequest) Reset()         { *m = SayRequest{} }
func (m *SayRequest) String() string { return proto.CompactTextString(m) }
func (*SayRequest) ProtoMessage()    {}
func (*SayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{0}
}

func (m *SayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SayRequest.Unmarshal(m, b)
}
func (m *SayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SayRequest.Marshal(b, m, deterministic)
}
func (m *SayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayRequest.Merge(m, src)
}
func (m *SayRequest) XXX_Size() int {
	return xxx_messageInfo_SayRequest.Size(m)
}
func (m *SayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SayRequest proto.InternalMessageInfo

func (m *SayRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type SayReply struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SayReply) Reset()         { *m = SayReply{} }
func (m *SayReply) String() string { return proto.CompactTextString(m) }
func (*SayReply) ProtoMessage()    {}
func (*SayReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{1}
}

func (m *SayReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SayReply.Unmarshal(m, b)
}
func (m *SayReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SayReply.Marshal(b, m, deterministic)
}
func (m *SayReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayReply.Merge(m, src)
}
func (m *SayReply) XXX_Size() int {
	return xxx_messageInfo_SayReply.Size(m)
}
func (m *SayReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SayReply.DiscardUnknown(m)
}

var xxx_messageInfo_SayReply proto.InternalMessageInfo

func (m *SayReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type TalkRequest struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TalkRequest) Reset()         { *m = TalkRequest{} }
func (m *TalkRequest) String() string { return proto.CompactTextString(m) }
func (*TalkRequest) ProtoMessage()    {}
func (*TalkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{2}
}

func (m *TalkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TalkRequest.Unmarshal(m, b)
}
func (m *TalkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TalkRequest.Marshal(b, m, deterministic)
}
func (m *TalkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TalkRequest.Merge(m, src)
}
func (m *TalkRequest) XXX_Size() int {
	return xxx_messageInfo_TalkRequest.Size(m)
}
func (m *TalkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TalkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TalkRequest proto.InternalMessageInfo

func (m *TalkRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type TalkReply struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TalkReply) Reset()         { *m = TalkReply{} }
func (m *TalkReply) String() string { return proto.CompactTextString(m) }
func (*TalkReply) ProtoMessage()    {}
func (*TalkReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{3}
}

func (m *TalkReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TalkReply.Unmarshal(m, b)
}
func (m *TalkReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TalkReply.Marshal(b, m, deterministic)
}
func (m *TalkReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TalkReply.Merge(m, src)
}
func (m *TalkReply) XXX_Size() int {
	return xxx_messageInfo_TalkReply.Size(m)
}
func (m *TalkReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TalkReply.DiscardUnknown(m)
}

var xxx_messageInfo_TalkReply proto.InternalMessageInfo

func (m *TalkReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SayRequest)(nil), "hello.v1.SayRequest")
	proto.RegisterType((*SayReply)(nil), "hello.v1.SayReply")
	proto.RegisterType((*TalkRequest)(nil), "hello.v1.TalkRequest")
	proto.RegisterType((*TalkReply)(nil), "hello.v1.TalkReply")
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_61ef911816e0a8ce) }

var fileDescriptor_61ef911816e0a8ce = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0x70, 0xca, 0x0c, 0x95, 0xe4, 0xb8,
	0xb8, 0x82, 0x13, 0x2b, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0x73,
	0x8b, 0xd3, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x25, 0x19, 0x2e, 0x0e, 0xb0,
	0x7c, 0x41, 0x4e, 0x25, 0x16, 0x59, 0x79, 0x2e, 0xee, 0x90, 0xc4, 0x9c, 0x6c, 0xdc, 0xda, 0x65,
	0xb9, 0x38, 0x21, 0x0a, 0xb0, 0xea, 0x37, 0x2a, 0xe2, 0x62, 0xf5, 0x00, 0xb9, 0x44, 0xc8, 0x90,
	0x8b, 0x39, 0x38, 0xb1, 0x52, 0x48, 0x44, 0x0f, 0xe6, 0x30, 0x3d, 0x84, 0xab, 0xa4, 0x84, 0xd0,
	0x44, 0x0b, 0x72, 0x2a, 0x95, 0x18, 0x84, 0xcc, 0xb8, 0x58, 0x40, 0x46, 0x0b, 0x89, 0x22, 0x64,
	0x91, 0xdc, 0x22, 0x25, 0x8c, 0x2e, 0x0c, 0xd6, 0x65, 0xc0, 0xe8, 0xc4, 0x12, 0xc5, 0x54, 0x90,
	0x94, 0xc4, 0x06, 0x0e, 0x08, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xc8, 0xcf, 0xda,
	0x17, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloClient interface {
	Say(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error)
	// Receive event stream such as matching results.
	Talk(ctx context.Context, in *TalkRequest, opts ...grpc.CallOption) (Hello_TalkClient, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Say(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error) {
	out := new(SayReply)
	err := c.cc.Invoke(ctx, "/hello.v1.Hello/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) Talk(ctx context.Context, in *TalkRequest, opts ...grpc.CallOption) (Hello_TalkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Hello_serviceDesc.Streams[0], "/hello.v1.Hello/Talk", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloTalkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hello_TalkClient interface {
	Recv() (*TalkReply, error)
	grpc.ClientStream
}

type helloTalkClient struct {
	grpc.ClientStream
}

func (x *helloTalkClient) Recv() (*TalkReply, error) {
	m := new(TalkReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServer is the server API for Hello service.
type HelloServer interface {
	Say(context.Context, *SayRequest) (*SayReply, error)
	// Receive event stream such as matching results.
	Talk(*TalkRequest, Hello_TalkServer) error
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.v1.Hello/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Say(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_Talk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TalkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServer).Talk(m, &helloTalkServer{stream})
}

type Hello_TalkServer interface {
	Send(*TalkReply) error
	grpc.ServerStream
}

type helloTalkServer struct {
	grpc.ServerStream
}

func (x *helloTalkServer) Send(m *TalkReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.v1.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _Hello_Say_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Talk",
			Handler:       _Hello_Talk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hello.proto",
}
